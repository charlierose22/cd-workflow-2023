install.packages(c("gganimate", "ggplot2", "tidyverse", "dplyr", "plyr", "readxl", "readr", "gifski"))
# install/load packages
library(tidyverse)
library(dplyr)
library(readxl)
library(readr)
library(readr)
Raw_Data <- read_csv("Raw_Data.csv")
View(Raw_Data)
# import data
Raw_Data <- read_csv("Raw_Data.csv")
# install/load packages
library(tidyverse)
library(readxl)
library(readr)
# import data
Raw_Data <- read_csv("Raw_Data.csv")
View(Raw_Data)
# install/load packages (working within a project so working directory is fine)
library(tidyverse)
# import data from csv file, using the janitor package to clean the name format up.
Raw_Data <- readr::read_csv("~/Desktop/Charlie_CD/Charlie_CD/Raw_Data.csv") %>%
janitor::clean_names()
# drop unnecessary columns entirely, unless you have used them in the CD software.
Raw_Data$tags = NULL
Raw_Data$checked = NULL
# to make sure we don't edit any raw data files, duplicate and call the original dataset "base".
Base <- Raw_Data
# starting with the group area measurements, lengthen the table to erase white space.
# this will also clean up names so we can see which sample each compound is found in.
# the first "select" function removes the peak rating data, so we can deal with that later.
Group_Area <- select(Base, -c(starts_with("peak")))
Group_Area_Long <- pivot_longer(Group_Area,
c(starts_with("group")),
names_to = "sample",
names_prefix = "group_area_",
values_to = "group_area")
# do the same with the peak rating data, as was done with the group area measurements.
# remove the group area data first, as we have lengthened this already.
Peak_Rating <- select(Base, -c(starts_with("group")))
Peak_Rating_Long <- pivot_longer(Peak_Rating,
c(starts_with("peak")),
names_to = "sample",
names_prefix = "peak_rating_",
values_to = "peak_rating")
# clean up sample names column in the peak_rating_table, to remove the numbered file names from the CD software.
# this line uses regular expressions to tell us which part of the name to remove.
# clean up sample names column in the peak_rating_table, to remove the numbered file names from the CD software.
# this line uses regular expressions to tell us which part of the name to remove.
Peak_Rating_Long$sample <- stringi::stri_replace_all_regex(Peak_Rating_Long$sample, "^*_raw_f[\\dd]*", "")
View(Peak_Rating_Long)
View(Group_Area)
View(Base)
View(Group_Area_Long)
View(Peak_Rating_Long)
View(Peak_Rating_Long)
View(Peak_Rating)
# concatenate compound names and retention times to make a unique identifier
BaseUniqueID <- add_column(Base, "unique_id", .after = 1)
BaseUniqueID$unique_id = str_c(BaseUniqueID$name, "_", BaseUniqueID$rt_min)
View(BaseUniqueID)
# concatenate compound names and retention times to make a unique identifier
BaseUniqueID <- add_column(Base, unique_id, .after = 1)
# to make sure we don't edit any raw data files, duplicate and call the original dataset "base".
Base <- Raw_Data
# concatenate compound names and retention times to make a unique identifier
BaseUniqueID <- add_column(Base, unique_id, .after = 1)
# concatenate compound names and retention times to make a unique identifier
Base$unique_id = NA
View(Base)
as.data.frame(Base)
BaseUniqueID <- add_column(Base, unique_id, .after = 1)
# to make sure we don't edit any raw data files, duplicate and call the original dataset "base".
Base <- Raw_Data
# concatenate compound names and retention times to make a unique identifier
BaseUniqueID <- add_column(Base, unique_id = NA, .after = 1)
View(BaseUniqueID)
# to make sure we don't edit any raw data files, duplicate and call the original dataset "base".
Base <- Raw_Data
# concatenate compound names and retention times to make a unique identifier
BaseUniqueID <- add_column(Base, unique_id = NA, .after = 0)
View(BaseUniqueID)
BaseUniqueID_Fill <- unite(BaseUniqueID$unique_id, name:rt_min)
BaseUniqueID_Fill <- BaseUniqueID$unique_id <- str_c(BaseUniqueID$name, "_", BaseUniqueID$rt_min)
View(BaseUniqueID)
View(BaseUniqueID)
View(BaseUniqueID)
# add peak numer in as another unique identifier.
BaseUniqueID_PeakNumber <- add_column(BaseUniqueID, peak_number = NA, .after = 0)
View(BaseUniqueID_PeakNumber)
BaseUniqueID_PeakNumber$peak_number <- seq.int(nrow(BaseUniqueID_PeakNumber))
# starting with the group area measurements, lengthen the table to erase white space.
# this will also clean up names so we can see which sample each compound is found in.
# the first "select" function removes the peak rating data, so we can deal with that later.
#Group_Area <- select(Base, -c(starts_with("peak")))
Group_Area_Long <- pivot_longer(BaseUniqueID_PeakNumber, c(starts_with("group")),
names_to = "sample",
names_prefix = "group_area_",
values_to = "group_area")
View(Group_Area_Long)
# do the same with the peak rating data, as was done with the group area measurements.
# remove the group area data first, as we have lengthened this already.
Peak_Rating_Long <- pivot_longer(Group_Area_Long,
c(contains("rating")),
names_to = "sample_file",
names_prefix = "peak_rating_",
values_to = "peak_rating")
View(Peak_Rating_Long)
View(BaseUniqueID)
View(Peak_Rating_Long)
View(Group_Area_Long)
steve = colnames(Group_Area_Long)
View(steve)
write.csv(steve, file="col_names.txt", sep="\n")
write.csv(steve, file="col_names.txt")
write.csv(steve, file="col_names.txt", sep="\t")
write.table(steve, file="col_names.txt",)
# clean up sample names column in the peak_rating_table, to remove the numbered file names from the CD software.
# this line uses regular expressions to tell us which part of the name to remove.
Peak_Rating_Long$sample_file <- stringi::stri_replace_all_regex(Peak_Rating_Long$sample_file, "^*_raw_f[\\dd]*", "")
View(Peak_Rating_Long)
#SETUP/CLEAN----------
# install/load packages (working within a project so working directory is fine)
library(tidyverse)
# import data from csv file, using the janitor package to clean the name format up.
Raw_Data <- readr::read_csv("~/Desktop/Charlie_CD/Charlie_CD/Raw_Data.csv") %>%
janitor::clean_names()
# to make sure we don't edit any raw data files, duplicate and call the original dataset "base".
Base <- Raw_Data
View(Base)
# drop unnecessary columns entirely, unless you have used them in the CD software.
Base$tags = NULL
Base$checked = NULL
# concatenate compound names and retention times to make a unique identifier, this will make things easier later on.
BaseUniqueID <- add_column(Base, unique_id = NA, .after = 0)
BaseUniqueID$unique_id <- str_c(BaseUniqueID$name, "_", BaseUniqueID$rt_min)
View(BaseUniqueID)
# add peak number in as another unique identifier.
BaseUniqueID_PeakNumber <- add_column(BaseUniqueID, peak_number = NA, .after = 0)
BaseUniqueID_PeakNumber$peak_number <- seq.int(nrow(BaseUniqueID_PeakNumber))
View(BaseUniqueID_PeakNumber)
# starting with the group area measurements, lengthen the table to erase white space.
colnames(BaseUniqueID_PeakNumber) <- sub("*_raw_f\\d\\d*", "", colnames(BaseUniqueID_PeakNumber))
View(BaseUniqueID_PeakNumber)
Longer <- BaseUniqueID_PeakNumber %>%
pivot_longer(cols = group_area_1_feedpump_a:peak_rating_qc3,
names_to = "sample",
values_to = "result")
# create a new column for sample name
SampleNames <- add_column(Longer, measurement = NA)
View(Longer)
# create a new column for sample name
SampleNames <- add_column(Longer, measurement = NA)
# fill in sample names
SampleNames <- mutate(SampleNames,
measurement = case_when(str_detect(sample, "group_area") ~ "group_area",
str_detect(sample, "peak_rating") ~ "peak_rating"))
View(SampleNames)
SampleNames$sample <- str_replace_all(SampleNames$sample, "group_area_", "")
SampleNames$sample <- str_replace_all(SampleNames$sample, "peak_rating_", "")
# pivot wider?
Wider <- SampleNames %>%
pivot_wider(names_from = measurement, values_from = result)
View(Wider)
# remove NAs and filter so that the peak_rating column only has values above 5.
NoNAs <- drop_na(Wider, group_area)
PeakRatingFiltered <- subset(NoNAs, peak_rating > 5)
View(PeakRatingFiltered)
GroupAreaFiltered <- subset(PeakRatingFiltered, group_area > 100000)
View(GroupAreaFiltered)
View(Longer)
# create column for replicate IDs.
FilteredReplicate <- add_column(GroupAreaFiltered, replicate = NA)
# fill replicate file based on end of string in sample column
FilteredReplicate <- mutate(FilteredReplicate,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
View(FilteredReplicate)
# create column for replicate IDs.
FilteredInjectionID <- add_column(FilteredReplicate, injection_id = NA)
# fill replicate file based on end of string in sample column
FilteredInjectionID <- mutate(FilteredInjectionID,
injection_id = case_when(str_starts(sample, "\\d") ~ "\\d"))
View(FilteredInjectionID)
# fill replicate file based on end of string in sample column
FilteredInjectionID <- mutate(FilteredInjectionID,
injection_id = case_when(str_starts(sample, "[\\d]") ~ "[\\d]"))
# fill replicate file based on end of string in sample column
FilteredInjectionID <- mutate(FilteredInjectionID,
injection_id = case_when(str_starts(sample, "^[1-100]") ~ "[[:digit:]]"))
View(FilteredInjectionID)
# fill replicate file based on end of string in sample column
FilteredInjectionID <- mutate(FilteredInjectionID,
injection_id = case_when(str_starts(sample, "^[1-100]") ~ regex("[1-100]")))
View(FilteredInjectionID)
#SETUP/CLEAN----------
# install/load packages (working within a project so working directory is fine)
library(tidyverse)
# import data from csv file, using the janitor package to clean the name format up.
Raw_Data <- readr::read_csv("~/Desktop/Charlie_CD/Charlie_CD/Raw_Data.csv") %>%
janitor::clean_names()
# to make sure we don't edit any raw data files, duplicate and call the original dataset "base".
Base <- Raw_Data
# drop unnecessary columns entirely, unless you have used them in the CD software.
Base$tags = NULL
Base$checked = NULL
# concatenate compound names and retention times to make a unique identifier, this will make things easier later on.
BaseUniqueID <- add_column(Base, unique_id = NA, .after = 0)
BaseUniqueID$unique_id <- str_c(BaseUniqueID$name, "_", BaseUniqueID$rt_min)
# add peak number in as another unique identifier.
BaseUniqueID_PeakNumber <- add_column(BaseUniqueID, peak_number = NA, .after = 0)
BaseUniqueID_PeakNumber$peak_number <- seq.int(nrow(BaseUniqueID_PeakNumber))
# starting with the group area measurements, lengthen the table to erase white space.
colnames(BaseUniqueID_PeakNumber) <- sub("*_raw_f\\d\\d*", "", colnames(BaseUniqueID_PeakNumber))
# pivot longer all in one
Longer <- BaseUniqueID_PeakNumber %>%
pivot_longer(cols = group_area_1_feedpump_a:peak_rating_qc3,
names_to = "sample",
values_to = "result")
# create a new column for sample name
SampleNames <- add_column(Longer, measurement = NA)
# fill in sample names
SampleNames <- mutate(SampleNames,
measurement = case_when(str_detect(sample, "group_area") ~ "group_area",
str_detect(sample, "peak_rating") ~ "peak_rating"))
# clean up sample column
SampleNames$sample <- str_replace_all(SampleNames$sample, "group_area_", "")
SampleNames$sample <- str_replace_all(SampleNames$sample, "peak_rating_", "")
# pivot wider?
Wider <- SampleNames %>%
pivot_wider(names_from = measurement, values_from = result)
#FILTER----------
# remove NAs and filter so that the peak_rating column only has values above 5.
NoNAs <- drop_na(Wider, group_area)
PeakRatingFiltered <- subset(NoNAs, peak_rating > 5)
# CHANGE THIS NUMBER DEPENDING ON INTENSITY FILTER
GroupAreaFiltered <- subset(PeakRatingFiltered, group_area > 100000)
# create column for replicate IDs.
FilteredReplicate <- add_column(GroupAreaFiltered, replicate = NA)
# fill replicate file based on end of string in sample column
FilteredReplicate <- mutate(FilteredReplicate,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# fill replicate file based on end of string in sample column
FilteredReplicate <- mutate(FilteredReplicate,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# Add location column for each sample.
FilteredLocation <- FilteredReplicate$sample_location = FilteredReplicate$sample
# Add location column for each sample.
FilteredReplicate$sample_location = FilteredReplicate$sample
View(FilteredReplicate)
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample_location, "^\\d\\d_*", "")
# Add location column for each sample.
FilteredReplicate$sample_location = FilteredReplicate$sample
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample_location, "\\d\\d_$", "")
View(FilteredReplicate)
# create column for replicate IDs.
FilteredReplicate <- add_column(GroupAreaFiltered, replicate = NA)
# fill replicate file based on end of string in sample column
FilteredReplicate <- mutate(FilteredReplicate,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# Add location column for each sample.
FilteredReplicate$sample_location = FilteredReplicate$sample
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample_location, "^\\d\\d_*", "")
View(FilteredReplicate)
# create column for replicate IDs.
FilteredReplicate <- add_column(GroupAreaFiltered, replicate = NA)
# fill replicate file based on end of string in sample column
FilteredReplicate <- mutate(FilteredReplicate,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# Add location column for each sample.
FilteredReplicate$sample_location = FilteredReplicate$sample
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample_location, "^\\d|\\d|_*", "")
View(FilteredReplicate)
FilteredReplicate$sample_location <- gsub('.{1}$', '', FilteredReplicate$sample_location)
View(FilteredReplicate)
# SPECIFIC FOR THIS DATASET
# correct the digester numbers
FilteredReplicate <- mutate(FilteredReplicate,
sample_location = case_when(
str_detect(sample, "digester1") ~ "digestera",
str_detect(sample, "digester2") ~ "digesterb",
str_detect(sample, "digester3") ~ "digesterc",
str_detect(sample, "digester4") ~ "digesterd",))
FilteredReplicate <- add_column(GroupAreaFiltered, replicate = NA)
# fill replicate file based on end of string in sample column
FilteredReplicate <- mutate(FilteredReplicate,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# Add location column for each sample and remove numbers (DO NOT PUT NUMBERS IN LOCATION TITLES! e.g. if you're talking pipe_1/pipe_2, call them pipe_a/pipe_b)
FilteredReplicate$sample_location = FilteredReplicate$sample
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample_location, "^\\d|\\d|_*", "")
FilteredReplicate$sample_location <- gsub('.{1}$', '', FilteredReplicate$sample_location)
# SPECIFIC FOR THIS DATASET
# correct the digester numbers
FilteredReplicate <- mutate(FilteredReplicate,
sample_location = ifwhen(
str_detect(sample, "digester1") ~ "digestera",
str_detect(sample, "digester2") ~ "digesterb",
str_detect(sample, "digester3") ~ "digesterc",
str_detect(sample, "digester4") ~ "digesterd",))
FilteredReplicate <- add_column(GroupAreaFiltered, replicate = NA)
# fill replicate file based on end of string in sample column
FilteredReplicate <- mutate(FilteredReplicate,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# Add location column for each sample and remove numbers (DO NOT PUT NUMBERS IN LOCATION TITLES! e.g. if you're talking pipe_1/pipe_2, call them pipe_a/pipe_b)
FilteredReplicate$sample_location = FilteredReplicate$sample
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample_location, "^\\d|\\d|_*", "")
FilteredReplicate$sample_location <- gsub('.{1}$', '', FilteredReplicate$sample_location)
# SPECIFIC FOR THIS DATASET
# correct the digester numbers
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample, "digester[a-d]", "[a-d]")
FilteredReplicate <- add_column(GroupAreaFiltered, replicate = NA)
# fill replicate file based on end of string in sample column
FilteredReplicate <- mutate(FilteredReplicate,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# Add location column for each sample and remove numbers (DO NOT PUT NUMBERS IN LOCATION TITLES! e.g. if you're talking pipe_1/pipe_2, call them pipe_a/pipe_b)
FilteredReplicate$sample_location = FilteredReplicate$sample
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample_location, "^\\d|\\d|_*", "")
FilteredReplicate$sample_location <- gsub('.{1}$', '', FilteredReplicate$sample_location)
# SPECIFIC FOR THIS DATASET
# correct the digester numbers
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample, "digester[a-d]", "[a-d]")
FilteredReplicate <- add_column(GroupAreaFiltered, replicate = NA)
# fill replicate file based on end of string in sample column
FilteredReplicate <- mutate(FilteredReplicate,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# Add location column for each sample and remove numbers (DO NOT PUT NUMBERS IN LOCATION TITLES! e.g. if you're talking pipe_1/pipe_2, call them pipe_a/pipe_b)
FilteredReplicate$sample_location = FilteredReplicate$sample
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample_location, "^\\d|\\d|_*", "")
FilteredReplicate$sample_location <- gsub('.{1}$', '', FilteredReplicate$sample_location)
# SPECIFIC FOR THIS DATASET
# correct the digester numbers
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample, "digester{a-d}", "[a-d]")
FilteredReplicate <- add_column(GroupAreaFiltered, replicate = NA)
# fill replicate file based on end of string in sample column
FilteredReplicate <- mutate(FilteredReplicate,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# Add location column for each sample and remove numbers (DO NOT PUT NUMBERS IN LOCATION TITLES! e.g. if you're talking pipe_1/pipe_2, call them pipe_a/pipe_b)
FilteredReplicate$sample_location = FilteredReplicate$sample
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample_location, "^\\d|\\d|_*", "")
FilteredReplicate$sample_location <- gsub('.{1}$', '', FilteredReplicate$sample_location)
# SPECIFIC FOR THIS DATASET
# correct the digester numbers
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample, "^digester\\D", "\\D")
View(FilteredReplicate)
FilteredReplicate <- add_column(GroupAreaFiltered, replicate = NA)
# fill replicate file based on end of string in sample column
FilteredReplicate <- mutate(FilteredReplicate,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# Add location column for each sample and remove numbers (DO NOT PUT NUMBERS IN LOCATION TITLES! e.g. if you're talking pipe_1/pipe_2, call them pipe_a/pipe_b)
FilteredReplicate$sample_location = FilteredReplicate$sample
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample_location, "^\\d|\\d|_*", "")
FilteredReplicate$sample_location <- gsub('.{1}$', '', FilteredReplicate$sample_location)
# SPECIFIC FOR THIS DATASET
# correct the digester numbers
FilteredDigesterCorrect <- add_column(FilteredReplicate, digester_number = NA)
FilteredDigesterCorrect <- mutate(FilteredDigesterCorrect,
replicate = case_when(
str_detect(sample, "digester1") ~ "A",
str_detect(sample, "digester2") ~ "B",
str_detect(sample, "digester3") ~ "C",
str_detect(sample, "digester4") ~ "D",
))
View(FilteredDigesterCorrect)
FilteredReplicate <- add_column(GroupAreaFiltered, replicate = NA)
# fill replicate file based on end of string in sample column
FilteredReplicate <- mutate(FilteredReplicate,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# Add location column for each sample and remove numbers (DO NOT PUT NUMBERS IN LOCATION TITLES! e.g. if you're talking pipe_1/pipe_2, call them pipe_a/pipe_b)
FilteredReplicate$sample_location = FilteredReplicate$sample
FilteredReplicate$sample_location <- stringi::stri_replace_all_regex(FilteredReplicate$sample_location, "^\\d|\\d|_*", "")
FilteredReplicate$sample_location <- gsub('.{1}$', '', FilteredReplicate$sample_location)
# SPECIFIC FOR THIS DATASET
# correct the digester numbers
FilteredDigesterCorrect <- add_column(FilteredReplicate, digester_number = NA)
FilteredDigesterCorrect <- mutate(FilteredDigesterCorrect,
digester_number = case_when(
str_detect(sample, "digester1") ~ "A",
str_detect(sample, "digester2") ~ "B",
str_detect(sample, "digester3") ~ "C",
str_detect(sample, "digester4") ~ "D",
))
FilteredCorrectSamples <- add_column(FilteredDigesterCorrect, sample_names = NA)
FilteredCorrectSamples$sample_names <- str_c(FilteredDigesterCorrect$sample_location, "_", FilteredDigesterCorrect$digester_number)
View(FilteredCorrectSamples)
