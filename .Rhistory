# LOAD TIDYVERSE AND CHECK PACKAGE UPDATES
library(tidyverse)
# IMPORT YOUR CD DATA
batch_3 <- readxl::read_excel("Leeds/08_Sept_Batch3_v1.xlsx") %>%
janitor::clean_names()
batch_5 <- readxl::read_excel("Leeds/08Sept_batch5_v1.xlsx") %>%
janitor::clean_names()
# RENAME DATAFRAME FOR CODE TO WORK WITH MINIMAL CHANGES
basedata_3 <- batch_3
basedata_5 <- batch_5
# DROP THESE COLUMNS UNLESS THEY HAVE BEEN USED IN YOUR CD WORKFLOW
basedata_3$tags = NULL
basedata_3$checked = NULL
basedata_5$tags = NULL
basedata_5$checked = NULL
# FILTER SAMPLES WITH NO COMPOUND NAMES AND NO MS2 DATA (IF NEEDED)
basedatawithcompoundnames_3 <- with(basedata_3, basedata_3[!(name == "" |
is.na(name)), ])
ms2dataonly_3 <- basedatawithcompoundnames_3[!grepl('No MS2',
basedatawithcompoundnames_3$ms2),]
basedatawithcompoundnames_5 <- with(basedata_5, basedata_5[!(name == "" |
is.na(name)), ])
ms2dataonly_5 <- basedatawithcompoundnames_5[!grepl('No MS2',
basedatawithcompoundnames_5$ms2),]
# CREATE A UNIQUE IDENTIFIER FOR EACH FEATURE USING CONCATENATION
# CHANGE BASEDATAWITHCOMPOUNDNAMES TO MS2DATAONLY IF YOU CHOOSE TO RUN THAT CODE LINE
uniqueid_3 <- add_column(basedatawithcompoundnames_3, unique_id = NA, .after = 0)
uniqueid_3$unique_id <- str_c(uniqueid_3$name, "_", uniqueid_3$rt_min)
uniqueid_5 <- add_column(basedatawithcompoundnames_5, unique_id = NA, .after = 0)
uniqueid_5$unique_id <- str_c(uniqueid_5$name, "_", uniqueid_5$rt_min)
# PEAK NUMBERS CAN BE USED AS ANOTHER IDENTIFIER
peaknumber_3 <- add_column(uniqueid_3, peak_number = NA, .after = 0)
peaknumber_3$peak_number <- seq.int(nrow(peaknumber))
# PLEASE REVIEW AND CHANGE ANY FUNCTIONAL CODE WRITTEN IN CAPITAL LETTERS
# LOAD TIDYVERSE AND CHECK PACKAGE UPDATES
library(tidyverse)
# IMPORT YOUR CD DATA
batch_3 <- readxl::read_excel("Leeds/08_Sept_Batch3_v1.xlsx") %>%
janitor::clean_names()
batch_5 <- readxl::read_excel("Leeds/08Sept_batch5_v1.xlsx") %>%
janitor::clean_names()
# RENAME DATAFRAME FOR CODE TO WORK WITH MINIMAL CHANGES
basedata_3 <- batch_3
basedata_5 <- batch_5
# DROP THESE COLUMNS UNLESS THEY HAVE BEEN USED IN YOUR CD WORKFLOW
basedata_3$tags = NULL
basedata_3$checked = NULL
basedata_5$tags = NULL
basedata_5$checked = NULL
# FILTER SAMPLES WITH NO COMPOUND NAMES AND NO MS2 DATA (IF NEEDED)
basedatawithcompoundnames_3 <- with(basedata_3, basedata_3[!(name == "" |
is.na(name)), ])
ms2dataonly_3 <- basedatawithcompoundnames_3[!grepl('No MS2',
basedatawithcompoundnames_3$ms2),]
basedatawithcompoundnames_5 <- with(basedata_5, basedata_5[!(name == "" |
is.na(name)), ])
ms2dataonly_5 <- basedatawithcompoundnames_5[!grepl('No MS2',
basedatawithcompoundnames_5$ms2),]
# CREATE A UNIQUE IDENTIFIER FOR EACH FEATURE USING CONCATENATION
# CHANGE BASEDATAWITHCOMPOUNDNAMES TO MS2DATAONLY IF YOU CHOOSE TO RUN THAT CODE LINE
uniqueid_3 <- add_column(basedatawithcompoundnames_3, unique_id = NA, .after = 0)
uniqueid_3$unique_id <- str_c(uniqueid_3$name, "_", uniqueid_3$rt_min)
uniqueid_5 <- add_column(basedatawithcompoundnames_5, unique_id = NA, .after = 0)
uniqueid_5$unique_id <- str_c(uniqueid_5$name, "_", uniqueid_5$rt_min)
# PEAK NUMBERS CAN BE USED AS ANOTHER IDENTIFIER
peaknumber_3 <- add_column(uniqueid_3, peak_number = NA, .after = 0)
peaknumber_3$peak_number <- seq.int(nrow(peaknumber_3))
peaknumber_5 <- add_column(uniqueid_5, peak_number = NA, .after = 0)
peaknumber_5$peak_number <- seq.int(nrow(peaknumber_5))
# REMOVE CD FILE NUMBERS FROM THE END OF SAMPLE NAMES
colnames(peaknumber_3) <- sub("*_raw_f.*", "", colnames(peaknumber_3))
colnames(peaknumber_5) <- sub("*_raw_f.*", "", colnames(peaknumber_5))
# LENGTHEN THE TABLE TO REMOVE WHITESPACE
longer_3 <- peaknumber_3 %>%
pivot_longer(cols = group_area_batch_3_1_a:peak_rating_qc_6,
names_to = "sample",
values_to = "result")
longer_5 <- peaknumber_5 %>%
pivot_longer(cols = group_area_batch_5_25_a:peak_rating_qc_6,
names_to = "sample",
values_to = "result")
# CREATE A SAMPLE NAME COLUMN AND FILL, SO WE CAN GROUP PEAK RATING AND GROUP AREA
samplenames_3 <- add_column(longer_3, measurement = NA)
samplenames_3 <- mutate(samplenames_3,
measurement = case_when(str_detect(sample,
"group_area") ~
"group_area",
str_detect(sample,
"peak_rating") ~
"peak_rating"))
samplenames_5 <- add_column(longer_5, measurement = NA)
samplenames_5 <- mutate(samplenames_5,
measurement = case_when(str_detect(sample,
"group_area") ~
"group_area",
str_detect(sample,
"peak_rating") ~
"peak_rating"))
# CLEAN SAMPLE NAME COLUMN
samplenames_3$sample <- str_replace_all(samplenames_3$sample, "group_area_", "")
samplenames_3$sample <- str_replace_all(samplenames_3$sample, "peak_rating_", "")
samplenames_5$sample <- str_replace_all(samplenames_5$sample, "group_area_", "")
samplenames_5$sample <- str_replace_all(samplenames_5$sample, "peak_rating_", "")
# WIDEN TABLE
wider_3 <- samplenames_3 %>%
pivot_wider(names_from = measurement, values_from = result)
wider_5 <- samplenames_5 %>%
pivot_wider(names_from = measurement, values_from = result)
# REMOVE NAS
nona_3 <- drop_na(wider_3, group_area)
nona_5 <- drop_na(wider_5, group_area)
# FILTER DEPENDING ON PEAK RATING NUMBER
peakrating_3 <- subset(nona_3, peak_rating > 5)
peakrating_5 <- subset(nona_5, peak_rating > 5)
# FILTER DEPENDING ON INTENSITY
grouparea_3 <- subset(peakrating_3, group_area > 100000)
grouparea_5 <- subset(peakrating_5, group_area > 100000)
View(wider_3)
View(samplenames_3)
# PLEASE REVIEW AND CHANGE ANY FUNCTIONAL CODE WRITTEN IN CAPITAL LETTERS
# LOAD TIDYVERSE AND CHECK PACKAGE UPDATES
library(tidyverse)
# IMPORT YOUR CD DATA
batch_3 <- readxl::read_excel("Leeds/08_Sept_Batch3_v1.xlsx") %>%
janitor::clean_names()
batch_5 <- readxl::read_excel("Leeds/08Sept_batch5_v1.xlsx") %>%
janitor::clean_names()
# RENAME DATAFRAME FOR CODE TO WORK WITH MINIMAL CHANGES
basedata_3 <- batch_3
basedata_5 <- batch_5
# DROP THESE COLUMNS UNLESS THEY HAVE BEEN USED IN YOUR CD WORKFLOW
basedata_3$tags = NULL
basedata_3$checked = NULL
basedata_5$tags = NULL
basedata_5$checked = NULL
# FILTER SAMPLES WITH NO COMPOUND NAMES AND NO MS2 DATA (IF NEEDED)
basedatawithcompoundnames_3 <- with(basedata_3, basedata_3[!(name == "" |
is.na(name)), ])
ms2dataonly_3 <- basedatawithcompoundnames_3[!grepl('No MS2',
basedatawithcompoundnames_3$ms2),]
basedatawithcompoundnames_5 <- with(basedata_5, basedata_5[!(name == "" |
is.na(name)), ])
ms2dataonly_5 <- basedatawithcompoundnames_5[!grepl('No MS2',
basedatawithcompoundnames_5$ms2),]
# CREATE A UNIQUE IDENTIFIER FOR EACH FEATURE USING CONCATENATION
# CHANGE BASEDATAWITHCOMPOUNDNAMES TO MS2DATAONLY IF YOU CHOOSE TO RUN THAT CODE LINE
uniqueid_3 <- add_column(basedatawithcompoundnames_3, unique_id = NA, .after = 0)
uniqueid_3$unique_id <- str_c(uniqueid_3$name, "_", uniqueid_3$rt_min)
uniqueid_5 <- add_column(basedatawithcompoundnames_5, unique_id = NA, .after = 0)
uniqueid_5$unique_id <- str_c(uniqueid_5$name, "_", uniqueid_5$rt_min)
# PEAK NUMBERS CAN BE USED AS ANOTHER IDENTIFIER
peaknumber_3 <- add_column(uniqueid_3, peak_number = NA, .after = 0)
peaknumber_3$peak_number <- seq.int(nrow(peaknumber_3))
peaknumber_5 <- add_column(uniqueid_5, peak_number = NA, .after = 0)
peaknumber_5$peak_number <- seq.int(nrow(peaknumber_5))
# REMOVE CD FILE NUMBERS FROM THE END OF SAMPLE NAMES
colnames(peaknumber_3) <- sub("*_raw_f.*", "", colnames(peaknumber_3))
colnames(peaknumber_5) <- sub("*_raw_f.*", "", colnames(peaknumber_5))
# LENGTHEN THE TABLE TO REMOVE WHITESPACE
longer_3 <- peaknumber_3 %>%
pivot_longer(cols = group_area_batch_3_1_a:peak_rating_qc_6,
names_to = "sample",
values_to = "result")
longer_5 <- peaknumber_5 %>%
pivot_longer(cols = group_area_batch_5_25_a:peak_rating_qc_6,
names_to = "sample",
values_to = "result")
# CREATE A SAMPLE NAME COLUMN AND FILL, SO WE CAN GROUP PEAK RATING AND GROUP AREA
samplenames_3 <- add_column(longer_3, measurement = NA)
samplenames_3 <- mutate(samplenames_3,
measurement = case_when(str_detect(sample,
"group_area") ~
"group_area",
str_detect(sample,
"peak_rating") ~
"peak_rating"))
samplenames_5 <- add_column(longer_5, measurement = NA)
samplenames_5 <- mutate(samplenames_5,
measurement = case_when(str_detect(sample,
"group_area") ~
"group_area",
str_detect(sample,
"peak_rating") ~
"peak_rating"))
# CLEAN SAMPLE NAME COLUMN
samplenames_3$sample <- str_replace_all(samplenames_3$sample, "group_area_", "")
samplenames_3$sample <- str_replace_all(samplenames_3$sample, "peak_rating_", "")
samplenames_5$sample <- str_replace_all(samplenames_5$sample, "group_area_", "")
samplenames_5$sample <- str_replace_all(samplenames_5$sample, "peak_rating_", "")
# WIDEN TABLE
wider_3 <- samplenames_3 %>%
pivot_wider(names_from = measurement, values_from = result)
wider_5 <- samplenames_5 %>%
pivot_wider(names_from = measurement, values_from = result)
# REMOVE NAS
nona_3 <- drop_na(wider_3, group_area)
nona_5 <- drop_na(wider_5, group_area)
# FILTER DEPENDING ON PEAK RATING NUMBER
peakrating_3 <- subset(nona_3, peak_rating > 5)
peakrating_5 <- subset(nona_5, peak_rating > 5)
# FILTER DEPENDING ON INTENSITY
grouparea_3 <- subset(peakrating_3, group_area > 100000)
grouparea_5 <- subset(peakrating_5, group_area > 100000)
# FOR TECHNICAL REPLICATES ----
# CREATE A NEW COLUMN
replicates_3 <- add_column(grouparea_3, replicate = NA)
replicates_5 <- add_column(grouparea_5, replicate = NA)
# MAKE SURE TECHNICAL REPLICATES ARE AT THE END OF THE SAMPLE NAME AND CHANGE A/B/C ACCORDINGLY
replicates_3 <- mutate(replicates_3,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
replicates_5 <- mutate(replicates_5,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# REMOVE PEAKS WITH RESULTS IN ONLY ONE REPLICATE
soloremoved_3 <- plyr::ddply(replicates_3, c("unique_id", "sample_location"),
function(d) {if (nrow(d) > 1) d else NULL})
View(replicates_3)
# REMOVE REPLICATES FROM SAMPLE NAMES
replicates_3 <- gsub(".*(\\d{2}).*", "\\1", replicates_3$replicate)
# MAKE SURE TECHNICAL REPLICATES ARE AT THE END OF THE SAMPLE NAME AND CHANGE A/B/C ACCORDINGLY
replicates_3 <- mutate(replicates_3,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# PLEASE REVIEW AND CHANGE ANY FUNCTIONAL CODE WRITTEN IN CAPITAL LETTERS
# LOAD TIDYVERSE AND CHECK PACKAGE UPDATES
library(tidyverse)
# IMPORT YOUR CD DATA
batch_3 <- readxl::read_excel("Leeds/08_Sept_Batch3_v1.xlsx") %>%
janitor::clean_names()
batch_5 <- readxl::read_excel("Leeds/08Sept_batch5_v1.xlsx") %>%
janitor::clean_names()
# RENAME DATAFRAME FOR CODE TO WORK WITH MINIMAL CHANGES
basedata_3 <- batch_3
basedata_5 <- batch_5
# DROP THESE COLUMNS UNLESS THEY HAVE BEEN USED IN YOUR CD WORKFLOW
basedata_3$tags = NULL
basedata_3$checked = NULL
basedata_5$tags = NULL
basedata_5$checked = NULL
# FILTER SAMPLES WITH NO COMPOUND NAMES AND NO MS2 DATA (IF NEEDED)
basedatawithcompoundnames_3 <- with(basedata_3, basedata_3[!(name == "" |
is.na(name)), ])
ms2dataonly_3 <- basedatawithcompoundnames_3[!grepl('No MS2',
basedatawithcompoundnames_3$ms2),]
basedatawithcompoundnames_5 <- with(basedata_5, basedata_5[!(name == "" |
is.na(name)), ])
ms2dataonly_5 <- basedatawithcompoundnames_5[!grepl('No MS2',
basedatawithcompoundnames_5$ms2),]
# CREATE A UNIQUE IDENTIFIER FOR EACH FEATURE USING CONCATENATION
# CHANGE BASEDATAWITHCOMPOUNDNAMES TO MS2DATAONLY IF YOU CHOOSE TO RUN THAT CODE LINE
uniqueid_3 <- add_column(basedatawithcompoundnames_3, unique_id = NA, .after = 0)
uniqueid_3$unique_id <- str_c(uniqueid_3$name, "_", uniqueid_3$rt_min)
uniqueid_5 <- add_column(basedatawithcompoundnames_5, unique_id = NA, .after = 0)
uniqueid_5$unique_id <- str_c(uniqueid_5$name, "_", uniqueid_5$rt_min)
# PEAK NUMBERS CAN BE USED AS ANOTHER IDENTIFIER
peaknumber_3 <- add_column(uniqueid_3, peak_number = NA, .after = 0)
peaknumber_3$peak_number <- seq.int(nrow(peaknumber_3))
peaknumber_5 <- add_column(uniqueid_5, peak_number = NA, .after = 0)
peaknumber_5$peak_number <- seq.int(nrow(peaknumber_5))
# REMOVE CD FILE NUMBERS FROM THE END OF SAMPLE NAMES
colnames(peaknumber_3) <- sub("*_raw_f.*", "", colnames(peaknumber_3))
colnames(peaknumber_5) <- sub("*_raw_f.*", "", colnames(peaknumber_5))
# LENGTHEN THE TABLE TO REMOVE WHITESPACE
longer_3 <- peaknumber_3 %>%
pivot_longer(cols = group_area_batch_3_1_a:peak_rating_qc_6,
names_to = "sample",
values_to = "result")
longer_5 <- peaknumber_5 %>%
pivot_longer(cols = group_area_batch_5_25_a:peak_rating_qc_6,
names_to = "sample",
values_to = "result")
# CREATE A SAMPLE NAME COLUMN AND FILL, SO WE CAN GROUP PEAK RATING AND GROUP AREA
samplenames_3 <- add_column(longer_3, measurement = NA)
samplenames_3 <- mutate(samplenames_3,
measurement = case_when(str_detect(sample,
"group_area") ~
"group_area",
str_detect(sample,
"peak_rating") ~
"peak_rating"))
samplenames_5 <- add_column(longer_5, measurement = NA)
samplenames_5 <- mutate(samplenames_5,
measurement = case_when(str_detect(sample,
"group_area") ~
"group_area",
str_detect(sample,
"peak_rating") ~
"peak_rating"))
# CLEAN SAMPLE NAME COLUMN
samplenames_3$sample <- str_replace_all(samplenames_3$sample, "group_area_", "")
samplenames_3$sample <- str_replace_all(samplenames_3$sample, "peak_rating_", "")
samplenames_5$sample <- str_replace_all(samplenames_5$sample, "group_area_", "")
samplenames_5$sample <- str_replace_all(samplenames_5$sample, "peak_rating_", "")
# WIDEN TABLE
wider_3 <- samplenames_3 %>%
pivot_wider(names_from = measurement, values_from = result)
wider_5 <- samplenames_5 %>%
pivot_wider(names_from = measurement, values_from = result)
# REMOVE NAS
nona_3 <- drop_na(wider_3, group_area)
nona_5 <- drop_na(wider_5, group_area)
# FILTER DEPENDING ON PEAK RATING NUMBER
peakrating_3 <- subset(nona_3, peak_rating > 5)
peakrating_5 <- subset(nona_5, peak_rating > 5)
# FILTER DEPENDING ON INTENSITY
grouparea_3 <- subset(peakrating_3, group_area > 100000)
grouparea_5 <- subset(peakrating_5, group_area > 100000)
# FOR TECHNICAL REPLICATES ----
# CREATE A NEW COLUMN
replicates_3 <- add_column(grouparea_3, replicate = NA)
replicates_5 <- add_column(grouparea_5, replicate = NA)
# MAKE SURE TECHNICAL REPLICATES ARE AT THE END OF THE SAMPLE NAME AND CHANGE A/B/C ACCORDINGLY
replicates_3 <- mutate(replicates_3,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
replicates_5 <- mutate(replicates_5,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# REMOVE REPLICATES FROM SAMPLE NAMES
gsub(".*(\\d{2}).*", "\\1", replicates_3$replicate)
# REMOVE REPLICATES FROM SAMPLE NAMES
replicates_3$replicate <- gsub(".*(\\d{2}).*", "\\1", replicates_3$replicate)
View(replicates_3)
# PLEASE REVIEW AND CHANGE ANY FUNCTIONAL CODE WRITTEN IN CAPITAL LETTERS
# LOAD TIDYVERSE AND CHECK PACKAGE UPDATES
library(tidyverse)
# IMPORT YOUR CD DATA
batch_3 <- readxl::read_excel("Leeds/08_Sept_Batch3_v1.xlsx") %>%
janitor::clean_names()
batch_5 <- readxl::read_excel("Leeds/08Sept_batch5_v1.xlsx") %>%
janitor::clean_names()
# RENAME DATAFRAME FOR CODE TO WORK WITH MINIMAL CHANGES
basedata_3 <- batch_3
basedata_5 <- batch_5
# DROP THESE COLUMNS UNLESS THEY HAVE BEEN USED IN YOUR CD WORKFLOW
basedata_3$tags = NULL
basedata_3$checked = NULL
basedata_5$tags = NULL
basedata_5$checked = NULL
# FILTER SAMPLES WITH NO COMPOUND NAMES AND NO MS2 DATA (IF NEEDED)
basedatawithcompoundnames_3 <- with(basedata_3, basedata_3[!(name == "" |
is.na(name)), ])
ms2dataonly_3 <- basedatawithcompoundnames_3[!grepl('No MS2',
basedatawithcompoundnames_3$ms2),]
basedatawithcompoundnames_5 <- with(basedata_5, basedata_5[!(name == "" |
is.na(name)), ])
ms2dataonly_5 <- basedatawithcompoundnames_5[!grepl('No MS2',
basedatawithcompoundnames_5$ms2),]
# CREATE A UNIQUE IDENTIFIER FOR EACH FEATURE USING CONCATENATION
# CHANGE BASEDATAWITHCOMPOUNDNAMES TO MS2DATAONLY IF YOU CHOOSE TO RUN THAT CODE LINE
uniqueid_3 <- add_column(basedatawithcompoundnames_3, unique_id = NA, .after = 0)
uniqueid_3$unique_id <- str_c(uniqueid_3$name, "_", uniqueid_3$rt_min)
uniqueid_5 <- add_column(basedatawithcompoundnames_5, unique_id = NA, .after = 0)
uniqueid_5$unique_id <- str_c(uniqueid_5$name, "_", uniqueid_5$rt_min)
# PEAK NUMBERS CAN BE USED AS ANOTHER IDENTIFIER
peaknumber_3 <- add_column(uniqueid_3, peak_number = NA, .after = 0)
peaknumber_3$peak_number <- seq.int(nrow(peaknumber_3))
peaknumber_5 <- add_column(uniqueid_5, peak_number = NA, .after = 0)
peaknumber_5$peak_number <- seq.int(nrow(peaknumber_5))
# REMOVE CD FILE NUMBERS FROM THE END OF SAMPLE NAMES
colnames(peaknumber_3) <- sub("*_raw_f.*", "", colnames(peaknumber_3))
colnames(peaknumber_5) <- sub("*_raw_f.*", "", colnames(peaknumber_5))
# LENGTHEN THE TABLE TO REMOVE WHITESPACE
longer_3 <- peaknumber_3 %>%
pivot_longer(cols = group_area_batch_3_1_a:peak_rating_qc_6,
names_to = "sample",
values_to = "result")
longer_5 <- peaknumber_5 %>%
pivot_longer(cols = group_area_batch_5_25_a:peak_rating_qc_6,
names_to = "sample",
values_to = "result")
# CREATE A SAMPLE NAME COLUMN AND FILL, SO WE CAN GROUP PEAK RATING AND GROUP AREA
samplenames_3 <- add_column(longer_3, measurement = NA)
samplenames_3 <- mutate(samplenames_3,
measurement = case_when(str_detect(sample,
"group_area") ~
"group_area",
str_detect(sample,
"peak_rating") ~
"peak_rating"))
samplenames_5 <- add_column(longer_5, measurement = NA)
samplenames_5 <- mutate(samplenames_5,
measurement = case_when(str_detect(sample,
"group_area") ~
"group_area",
str_detect(sample,
"peak_rating") ~
"peak_rating"))
# CLEAN SAMPLE NAME COLUMN
samplenames_3$sample <- str_replace_all(samplenames_3$sample, "group_area_", "")
samplenames_3$sample <- str_replace_all(samplenames_3$sample, "peak_rating_", "")
samplenames_5$sample <- str_replace_all(samplenames_5$sample, "group_area_", "")
samplenames_5$sample <- str_replace_all(samplenames_5$sample, "peak_rating_", "")
# WIDEN TABLE
wider_3 <- samplenames_3 %>%
pivot_wider(names_from = measurement, values_from = result)
wider_5 <- samplenames_5 %>%
pivot_wider(names_from = measurement, values_from = result)
# REMOVE NAS
nona_3 <- drop_na(wider_3, group_area)
nona_5 <- drop_na(wider_5, group_area)
# FILTER DEPENDING ON PEAK RATING NUMBER
peakrating_3 <- subset(nona_3, peak_rating > 5)
peakrating_5 <- subset(nona_5, peak_rating > 5)
# FILTER DEPENDING ON INTENSITY
grouparea_3 <- subset(peakrating_3, group_area > 100000)
grouparea_5 <- subset(peakrating_5, group_area > 100000)
# FOR TECHNICAL REPLICATES ----
# CREATE A NEW COLUMN
replicates_3 <- add_column(grouparea_3, replicate = NA)
replicates_5 <- add_column(grouparea_5, replicate = NA)
# MAKE SURE TECHNICAL REPLICATES ARE AT THE END OF THE SAMPLE NAME AND CHANGE A/B/C ACCORDINGLY
replicates_3 <- mutate(replicates_3,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
replicates_5 <- mutate(replicates_5,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# REMOVE REPLICATES FROM SAMPLE NAMES
replicates_3$sample <- gsub(".*(\\d{2}).*", "\\1",
replicates_3$sample)
View(replicates_3)
replicates_3$sample <- gsub(".*(\\d{1}).*", "\\1",
replicates_3$sample)
replicates_3$sample <- gsub(".*(\\d{2}).*", "\\1",
replicates_3$sample)
View(replicates_3)
replicates_3 <- add_column(grouparea_3, replicate = NA)
replicates_5 <- add_column(grouparea_5, replicate = NA)
# MAKE SURE TECHNICAL REPLICATES ARE AT THE END OF THE SAMPLE NAME AND CHANGE A/B/C ACCORDINGLY
replicates_3 <- mutate(replicates_3,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
replicates_5 <- mutate(replicates_5,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
# REMOVE REPLICATES FROM SAMPLE NAMES
replicates_3$sample <- gsub(".*(\\d{1,2}).*", "\\1",
replicates_3$sample)
View(replicates_3)
replicates_3 <- add_column(grouparea_3, replicate = NA)
replicates_5 <- add_column(grouparea_5, replicate = NA)
# MAKE SURE TECHNICAL REPLICATES ARE AT THE END OF THE SAMPLE NAME AND CHANGE A/B/C ACCORDINGLY
replicates_3 <- mutate(replicates_3,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
replicates_5 <- mutate(replicates_5,
replicate = case_when(
str_ends(sample, "a") ~ "1",
str_ends(sample, "b") ~ "2",
str_ends(sample, "c") ~ "3"))
View(replicates_3)
replicates_3$sample <- str_sub(replicates_3$sample, end = -3)
View(replicates_3)
replicates_5$sample <- str_sub(replicates_5$sample, end = -3)
soloremoved_3 <- plyr::ddply(replicates_3, c("unique_id", "sample_location"),
function(d) {if (nrow(d) > 1) d else NULL})
soloremoved_3 <- plyr::ddply(replicates_3, c("unique_id", "sample"),
function(d) {if (nrow(d) > 1) d else NULL})
soloremoved_5 <- plyr::ddply(replicates_5, c("unique_id", "sample"),
function(d) {if (nrow(d) > 1) d else NULL})
View(soloremoved_3)
split_3 <- split(soloremoved_3, soloremoved_3$annot_source_mass_list_search)
mzcloud_3 <- split$"No results"
asslistmerged_3 <- masslists_3 %>%
pivot_longer(cols = c(starts_with("mass_list_match")) ,
names_to = "mass_list_name",
names_prefix = "mass_list_match_",
values_to = "mass_list_match")
masslistmerged_3 <- masslists_3 %>%
pivot_longer(cols = c(starts_with("mass_list_match")) ,
names_to = "mass_list_name",
names_prefix = "mass_list_match_",
values_to = "mass_list_match")
split_3 <- split(soloremoved_3, soloremoved_3$annot_source_mass_list_search)
mzcloud_3 <- split$"No results"
View(soloremoved_3)
mzcloud_3 <- split$"No results"
View(soloremoved_3)
write.csv(soloremoved_3, "Leeds/Filtered_Batch_3_Results.csv", row.names = FALSE)
# WRITE CSV
write.csv(soloremoved_3, "Leeds/Filtered_Batch_3_Results.csv", row.names = FALSE)
# WRITE CSV
write.csv(soloremoved_3, "Leeds/Filtered_Batch_3_Results.csv")
View(soloremoved_3)
source("~/GitHub/cd_workflow_2023/Scripts/Leeds.R")
# WRITE CSV
write.csv(soloremoved_3, "Leeds/Filtered_Batch_3_Results.csv")
readr::write_csv(soloremoved_3, "Leeds/Filtered_Batch_3_Results.csv")
readr::write_csv(soloremoved_5, "Leeds/Filtered_Batch_5_Results.csv")
View(soloremoved_3)
